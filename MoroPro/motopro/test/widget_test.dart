import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:motopro/main.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  group('MoroPro App', () {
    setUp(() {
      SharedPreferences.setMockInitialValues({});
    });

    testWidgets('deve iniciar na tela de splash', (WidgetTester tester) async {
      await tester.pumpWidget(const MyApp());
      
      // Verifica se a tela de splash √© exibida inicialmente (antes da navega√ß√£o)
      expect(find.byType(CircularProgressIndicator), findsOneWidget);
      
      // Aguarda um pouco para ver se ainda est√° na splash
      await tester.pump(const Duration(milliseconds: 100));
      expect(find.byType(CircularProgressIndicator), findsOneWidget);
    });

    testWidgets('deve navegar para login quando n√£o h√° token', (WidgetTester tester) async {
      await tester.pumpWidget(const MyApp());
      await tester.pumpAndSettle();

      // Aguarda a navega√ß√£o para login
      await tester.pump(const Duration(seconds: 2));
      await tester.pumpAndSettle();

      // Verifica se est√° na tela de login
      expect(find.text('Login'), findsOneWidget);
      expect(find.text('E-mail'), findsOneWidget);
      expect(find.text('Senha'), findsOneWidget);
      expect(find.text('Entrar'), findsOneWidget);
    });

    testWidgets('deve ter bot√µes de navega√ß√£o na tela de login', (WidgetTester tester) async {
      await tester.pumpWidget(const MyApp());
      await tester.pumpAndSettle();

      // Aguarda a navega√ß√£o para login
      await tester.pump(const Duration(seconds: 2));
      await tester.pumpAndSettle();

      // Verifica se os bot√µes de navega√ß√£o est√£o presentes
      expect(find.text('Ainda n√£o tem cadastro? Criar conta'), findsOneWidget);
      expect(find.text('Recuperar senha'), findsOneWidget);
    });

    testWidgets('n√£o deve ter bot√£o de teste de conex√£o', (WidgetTester tester) async {
      await tester.pumpWidget(const MyApp());
      await tester.pumpAndSettle();

      // Aguarda a navega√ß√£o para login
      await tester.pump(const Duration(seconds: 2));
      await tester.pumpAndSettle();

      // Verifica se o bot√£o de teste de conex√£o foi removido
      expect(find.text('Testar Conex√£o com Servidor'), findsNothing);
      expect(find.text('üîß Testar Conex√£o com Servidor'), findsNothing);
    });
  });
}
